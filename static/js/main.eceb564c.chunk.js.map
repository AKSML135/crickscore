{"version":3,"sources":["images/vs.png","components/Navbar.js","api/Api.js","components/MyCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","AppBar","position","Toolbar","IconButton","color","Typography","variant","API_KEY","MyCard","match","useState","detail","setDatail","open","setOpen","showDetailBtnClicked","id","url","fetch","then","response","json","catch","error","console","log","getMatchDetail","data","handleClickOpen","handleClose","type","Card","style","background","matchStarted","marginTop","CardContent","Grid","container","justify","alignItems","spacing","item","width","src","require","alt","CardActions","Button","onClick","marginLeft","Date","dateTimeGMT","toLocaleString","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","stat","fontStyle","fontWeight","score","DialogActions","autoFocus","App","matches","setMatches","useEffect","getMatches","alert","className","sm","map","key","unique_id","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.eceb564c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vs.27b23a52.png\";","import { AppBar, Toolbar, Typography , IconButton} from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport React from 'react';\r\n\r\nconst Navbar=()=>{\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n            <IconButton color=\"inherit\">\r\n                <MenuIcon/>\r\n            </IconButton>\r\n                <Typography variant=\"h6\">Crick Score⚾ </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default Navbar;","const API_KEY=\"Enpt2JeWZMZY0L2crKWYblrZ6Qt1\"\r\n\r\n//get all the matches\r\n\r\nexport const getMatches=()=>{\r\n    const url = `https://cricapi.com/api/matches?apikey=${API_KEY}`;\r\n    return fetch(url)\r\n    .then((response)=>response.json())\r\n    .catch((error)=>console.log(\"Error: \",error))\r\n}\r\n\r\n//load match details\r\nexport const getMatchDetail=(id)=>{\r\n    const url = `https://cricapi.com/api/cricketScore?apikey=${API_KEY}&unique_id=${id}`;\r\n    return fetch(url)\r\n    .then((response)=>response.json())\r\n    .catch((error)=>console.log(\"Error: \",error))\r\n\r\n}","import React, { useState } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Grid,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { getMatchDetail } from \"../api/Api\";\r\n\r\nconst MyCard = ({ match }) => {\r\n  const [detail, setDatail] = useState({});\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const getMatchCard = () => (\r\n    <div>\r\n      <Card\r\n        style={{\r\n          background: match.matchStarted ? \"#e2e2e2\" : \"\",\r\n          marginTop: 15,\r\n        }}\r\n      >\r\n        <CardContent>\r\n          <Grid container justify=\"center\" alignItems=\"center\" spacing={4}>\r\n            <Grid item>\r\n              <Typography variant=\"h5\">{match[\"team-1\"]}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <img\r\n                style={{ width: 85 }}\r\n                src={require(\"../images/vs.png\")}\r\n                alt=\"\"\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"h5\">{match[\"team-2\"]}</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <CardActions>\r\n          <Grid container justify=\"center\">\r\n            <Button\r\n              onClick={() => {\r\n                showDetailBtnClicked(match[\"unique_id\"]);\r\n              }}\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n            >\r\n              Show Detail\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: 5 }}\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n            >\r\n              Starting time {new Date(match.dateTimeGMT).toLocaleString()}\r\n            </Button>\r\n          </Grid>\r\n        </CardActions>\r\n      </Card>\r\n    </div>\r\n  );\r\n\r\n  const showDetailBtnClicked = (id) => {\r\n    getMatchDetail(id)\r\n      .then((data) => {\r\n        console.log(data);\r\n        setDatail(data);\r\n        handleClickOpen();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {match.type == \"Twenty20\" ? getMatchCard() : \"\"}\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Match Detail...\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <Typography>{detail.stat}</Typography>\r\n            <Typography>\r\n              Match\r\n              <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>\r\n                {detail.matchStarted ? \"Started\" : \"Still not started\"}\r\n              </span>\r\n            </Typography>\r\n            <Typography>\r\n              Score\r\n              <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>\r\n                {\" \"}\r\n                {detail.score}\r\n              </span>\r\n            </Typography>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyCard;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Button, Grid, Typography} from \"@material-ui/core\";\nimport Navbar from './components/Navbar';\nimport MyCard from './components/MyCard';\nimport {getMatches} from './api/Api'\n\nfunction App() {\n\n  const [matches,setMatches]=useState([]);\n\n  useEffect(()=>{\n    {getMatches().then((data)=> setMatches(data.matches))\n    .catch((error)=>alert(\"Couldn't Load Data\"))}\n  },[])\n\n  return (\n    <div className=\"App\">\n    <Navbar/>\n    <Typography variant=\"h3\" style={{marginTop:20}}>CrickScore- Welcome To Live Cricket ⚾ </Typography>\n    \n    <Grid container>\n      <Grid sm=\"2\"></Grid>\n      <Grid sm=\"8\">\n      {\n      matches.map((match)=>(\n        <MyCard key={match.unique_id} match={match} />\n      ))\n    }\n      </Grid>\n    </Grid>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}